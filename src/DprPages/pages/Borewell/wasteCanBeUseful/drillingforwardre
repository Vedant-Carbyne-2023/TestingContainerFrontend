import React, { forwardRef, useEffect, useImperativeHandle, useState } from 'react';
import moment from 'moment';
import { Button, Col, Container, Form, Row, Table } from 'react-bootstrap';
import MyToggleComponent from '../ActiveToggle';
import { api } from '../../../functions/axiosDefault';
import { errorHandler } from '../../../functions/errorHandle';
import Swal from 'sweetalert2';

const Drilling = forwardRef(({  latestDpr,
    
    drillingVendorName,
    }, ref) =>
    {

        
  const [formData, setFormData] = useState({
    drillingDate: '',
  });

  const [isEndDrillingDate, setIsEndDrillingDate] = useState(false);
  const [activeDrilling, setActiveDrilling] = useState(false);
  const [nonActiveReason, setNonActiveReason] = useState('');
  const [drillingDates, setDrillingDates] = useState([]);
  const [ifLastDrillingDate, setIfLastDrillingDate] = useState(false);

  useEffect(() => {
    if (latestDpr && latestDpr.drillingDates) {
      setDrillingDates(latestDpr.drillingDates);
      setIfLastDrillingDate(latestDpr.drillingDates.slice(-1)[0]?.typeOfDate === 'End Date');
    }
  }, [latestDpr]);

  const handleChange = (e, fieldType) => {
    const { name, value } = e.target;
    setFormData((prevData) => ({ ...prevData, [name]: value }));
  };


  

  const handleSubmit = async (e) => {
    const startDate = drillingDates.length === 0;

    const newDate = {
      workingDate: formData.drillingDate,
      typeOfDate: startDate ? 'Start Date' : isEndDrillingDate ? 'End Date' : 'Regular Date',
      status: activeDrilling ? 'Active' : 'Non Active',
      reason: activeDrilling ? '' : nonActiveReason,
    };

    let allDates = drillingDates
    allDates.push(newDate)

    // Additional logic for submitting to the server
    // ...
    setFormData({ drillingDate: '' });
    setActiveDrilling(false);
    setNonActiveReason('');
    setIsEndDrillingDate(false);
    return allDates
  

  };
  useImperativeHandle(ref, () => ({
    handleSubmit,
  }));
  return (
    <form onSubmit={handleSubmit} >
    <Container className="mt-3">
      <Row className="d-flex justify-content-around" style={{ alignItems: 'center' }}>
        <h4 className="p-0">Drilling</h4>
        <Col md={3}>
          <Form.Label htmlFor="drillingVendorName">Drilling Vendor Name</Form.Label>
          <Form.Control id="drillingVendorName" disabled value={drillingVendorName} />
        </Col>

        {drillingDates.length > 0 && (
  <Table striped bordered hover>
    <thead>
      <tr>
        <th>Type Of Date</th>
        <th> Date</th>
        <th>Status On That Date</th>
        <th>Reason For Non Active</th>
      </tr>
    </thead>
    <tbody>
      {drillingDates.map((drillingDate, index) => (
        <tr key={index}>
          <td>{drillingDate.typeOfDate}</td>
          <td>{moment(drillingDate.workingDate).format('DD/MM/YYYY')}</td>
          <td>{drillingDate.status}</td>
          <td>{drillingDate.status === 'Non Active' ? drillingDate.reason : '-'}</td>
        </tr>
      ))}
    </tbody>
  </Table>
)}

        {ifLastDrillingDate && <p>Drilling Was Ended</p>}

        {!ifLastDrillingDate && drillingDates.length > 0 && (
          <>
            <div>
              <Form.Label>If End Of Drilling Press The End Button </Form.Label>
              <Button
                variant={!isEndDrillingDate ? 'light' : 'danger'}
                onClick={() => setIsEndDrillingDate(!isEndDrillingDate)}
              >
                Drilling End Date
              </Button>
            </div>

            <Col md={3}>
              <Form.Label htmlFor="drillingDate">Drilling Date</Form.Label>
              <Form.Control
                id="drillingDate"
                type="date"
                disabled={ifLastDrillingDate}
                name="drillingDate"
                value={formData.drillingDate}
                onChange={(e) => handleChange(e, 'drillingDate')}
              />
            </Col>

            <Col md={3}>
              <MyToggleComponent
                setChecked={(check) => setActiveDrilling(check)}
                setReason={(reason) => setNonActiveReason(reason)}
              />
            </Col>
          </>
        )}

        {drillingDates.length < 1 && (
          <Col md={3}>
            <Form.Label htmlFor="drillingDate">Drilling Start Date</Form.Label>
            <Form.Control
              id="drillingDate"
              type="date"
              name="drillingDate"
              value={formData.drillingDate}
              onChange={(e) => handleChange(e, 'drillingDate')}
            />

            <MyToggleComponent
              setChecked={(check) => setActiveDrilling(check)}
              setReason={(reason) => setNonActiveReason(reason)}
            />
          </Col>
        )}
      </Row>

    
    </Container>
    </form>
  );
})
export default Drilling;